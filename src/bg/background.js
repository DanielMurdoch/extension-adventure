/** 
	Request Format:
	tag: Tag containing the request type / action.
	url: String containing the url to the search page for the individual prof.
	name: String containing the prof name.
**/
function rmpSearchRequest(request, sender, sendResponse) {
	//Turn the requested prof's name into a single, non dot-extended variable.
	var profName = request.name
	//Try and get the prof's data from the chrome storage.
	chrome.storage.local.get(profName, function(items) {
		//If the storage contains any data under that prof's name, then we good, and can send that back to the requester.
		if(!$.isEmptyObject(items)) {
			console.log('Loaded data from Storage.')
			sendResponse(JSON.parse(items[profName]))
		} else {
			//If the storage get call fails, we gotta make some ajax calls to RMP then. First get uses the URL formatted in the injected script. This calls the search page.
			$.get(request.url, function(outterData){
				//If the get is sucessful, we can grab the href of the first A tag under the class 'listings'. This is the Link to the profs RMP page.
				var profLink = $($($.parseHTML(outterData)).find('.listings')).find('a:first').attr('href')
				//If this works -> the prof exists. If this fails, then the prof doesn't exist on RMP.
				if(profLink) {
					//We tag the link from above onto the RMP base URL, and make another get request, this time to the prof's page.
					//This should always work, as the URL is actually an existing link on the RMP page. If it fails, RMP probably broke.
					profLink = 'http://www.ratemyprofessors.com' + profLink
					$.get(profLink, function(innerData) {
						//Parse the html from the prof's page and place into variables.
						var overallGrade = $($.parseHTML(innerData)).find('.grade:first').html()
						var averageGrade = $($.parseHTML(innerData)).find('.grade:eq(1)').html()
						var helpfullness = $($.parseHTML(innerData)).find('.rating:first').html()
						var clarity = $($.parseHTML(innerData)).find('.rating:eq(1)').html()
						var easiness = $($.parseHTML(innerData)).find('.rating:eq(2)').html()
						//Format a response with all the data in one object.
						var formattedResponse = {
							link: profLink, 
							name: profName, 
							overallGrade: overallGrade, 
							averageGrade: averageGrade, 
							helpfullness: helpfullness, 
							clarity: clarity, 
							easiness: easiness 
						}
						//Massage data into a storage appropriate format.
						var storageObject = {};
						storageObject[profName] = JSON.stringify(formattedResponse);
						//Place the data into chrome.storage.local, for retrieval sans ajax later.
						chrome.storage.local.set(storageObject, function() {
							console.log('No data in storage, setting in storage now.');
						});
						//Finally, responsd to the message with all the RMP data about the requested prof.
						sendResponse(formattedResponse)
					}).fail(function() {
						//This is theoretically impossible, since this link is generated by RMP's website, this should never happen. SAFETY FIRST! Handle anyway.
						sendResponse(null)
					})
				} else {
					var blankResponse = {
						link: '',
						name: profName,
						overallGrade: 'NA',
						averageGrade: 'NA',
						helpfullness: 'NA',
						clarity: 'NA',
						easiness: 'NA'
					}
					sendResponse(blankResponse)
				}
			}).fail(function(){
				//If the search page refuses to load. Not much we can do here.
				sendResponse(null)
			})
		}
	})
}
//Listener, waiting for a request from the injected script.
chrome.runtime.onMessage.addListener(
  function(request, sender, sendResponse) {
  	//Check if the request is from the ijnect script and wants the ajax data.
    if (request.tag == 'fetch_rmp_data') {
    	//Call the function that handles the gets.
      	rmpSearchRequest(request, sender, sendResponse)
      	//This return true prevents the dialogue between the message sender and receiver from breaking down during the lul in AJAX requests.
      	return true;
    } else {
    	chrome.pageAction.show(sender.tab.id);
    	sendResponse();
    }
  });